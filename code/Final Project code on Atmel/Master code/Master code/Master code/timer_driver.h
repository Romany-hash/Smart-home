/*
 * timer_driver.h
 *
 * @file timer_driver.h
 * @brief Timer driver for microcontroller.
 * @details This file contains the declarations of timer driver functions, including
 *          initialization of timer in CTC mode, stopping the timer, initialization of timer
 *          in fast PWM mode, and changing the duty cycle of the PWM signal.
 * @author Romany Sobhy
 */

#ifndef TIMER_DRIVER_H_
#define TIMER_DRIVER_H_

#include <avr/io.h>
#include <avr/interrupt.h>
#include "std_macros.h"
#include "STD_Types.h"

/*
 * @brief Initialize and start the timer0 for compare match.
 *
 * @details This function initializes and starts timer0 in CTC (Clear Timer on Compare) mode.
 *          It configures the compare register OCR0, sets the timer mode, configures the clock,
 *          enables global interrupts, and enables the timer 0 interrupt for compare match.
 */
void timer0_initializeCTC(void);

/*
 * @brief Stop timer0.
 *
 * @details This function stops the timer0 by disabling the clock signal.
 */
void timer0_stop(void);

/*
 * @brief Initialize timer0 for FastPWM mode.
 *
 * @details This function initializes timer0 for FastPWM (Fast Pulse Width Modulation) mode.
 *          It configures the compare register OCR0, sets the timer mode, enables global interrupts,
 *          configures the PWM mode, enables the timer0 interrupt for overflow mode, and configures the clock.
 */
void timer_initializefastpwm(void);

/*
 * @brief Set duty cycle to the given duty percentage.
 *
 * @param duty The duty cycle percentage to be set.
 *
 * @details This function sets the duty cycle of the PWM signal generated by timer0.
 *          The duty cycle is calculated based on the given percentage and the compare register OCR0 is updated accordingly.
 */
void change_dutycycle(float64 duty);

#endif /* TIMER_DRIVER_H_ */
